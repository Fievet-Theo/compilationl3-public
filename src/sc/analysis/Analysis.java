/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAP(AP node);
    void caseAEntierDv(AEntierDv node);
    void caseATabDv(ATabDv node);
    void caseADecfoncLdf(ADecfoncLdf node);
    void caseAVideLdf(AVideLdf node);
    void caseADf(ADf node);
    void caseALisdecLdvo(ALisdecLdvo node);
    void caseAVideLdvo(AVideLdvo node);
    void caseADecvarLd(ADecvarLd node);
    void caseAVideLd(AVideLd node);
    void caseADecvar2Ldvb(ADecvar2Ldvb node);
    void caseAVideLdvb(AVideLdvb node);
    void caseAApp(AApp node);
    void caseAIdVar(AIdVar node);
    void caseAIdexprVar(AIdexprVar node);
    void caseAExprLe(AExprLe node);
    void caseAVideLe(AVideLe node);
    void caseAVirguleLe1(AVirguleLe1 node);
    void caseAVideLe1(AVideLe1 node);
    void caseALiLi(ALiLi node);
    void caseAVideLi(AVideLi node);
    void caseAAffectationI(AAffectationI node);
    void caseASiI(ASiI node);
    void caseATantqueI(ATantqueI node);
    void caseAAppfoncI(AAppfoncI node);
    void caseARetourI(ARetourI node);
    void caseABlocI(ABlocI node);
    void caseAFoncecrireI(AFoncecrireI node);
    void caseAIa(AIa node);
    void caseAIaf(AIaf node);
    void caseAIbloc(AIbloc node);
    void caseASialorsIsi(ASialorsIsi node);
    void caseASinonIsi(ASinonIsi node);
    void caseAItq(AItq node);
    void caseAIr(AIr node);
    void caseAIecrire(AIecrire node);
    void caseAOuExpr(AOuExpr node);
    void caseAExpr1Expr(AExpr1Expr node);
    void caseAEtExpr1(AEtExpr1 node);
    void caseAExpr2Expr1(AExpr2Expr1 node);
    void caseAEgalExpr2(AEgalExpr2 node);
    void caseAInfExpr2(AInfExpr2 node);
    void caseAExpr3Expr2(AExpr3Expr2 node);
    void caseAPlusExpr3(APlusExpr3 node);
    void caseAMinusExpr3(AMinusExpr3 node);
    void caseAExpr4Expr3(AExpr4Expr3 node);
    void caseAMultExpr4(AMultExpr4 node);
    void caseADivExpr4(ADivExpr4 node);
    void caseAExpr5Expr4(AExpr5Expr4 node);
    void caseANegationExpr5(ANegationExpr5 node);
    void caseAExpr6Expr5(AExpr6Expr5 node);
    void caseAExprExpr6(AExprExpr6 node);
    void caseANbExpr6(ANbExpr6 node);
    void caseAAppExpr6(AAppExpr6 node);
    void caseAVarExpr6(AVarExpr6 node);
    void caseALireExpr6(ALireExpr6 node);

    void caseTSinon(TSinon node);
    void caseTSi(TSi node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTEgal(TEgal node);
    void caseTInf(TInf node);
    void caseTNegation(TNegation node);
    void caseTPo(TPo node);
    void caseTPf(TPf node);
    void caseTPv(TPv node);
    void caseTAo(TAo node);
    void caseTAf(TAf node);
    void caseTVirgule(TVirgule node);
    void caseTCo(TCo node);
    void caseTCf(TCf node);
    void caseTNb(TNb node);
    void caseTAlors(TAlors node);
    void caseTRetour(TRetour node);
    void caseTEntier(TEntier node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
