/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AClosIsi extends PIsi
{
    private TSi _si_;
    private PE _e_;
    private TAlors _alors_;
    private PIbloc _b1_;
    private TSinon _sinon_;
    private PIbloc _b2_;

    public AClosIsi()
    {
        // Constructor
    }

    public AClosIsi(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") PE _e_,
        @SuppressWarnings("hiding") TAlors _alors_,
        @SuppressWarnings("hiding") PIbloc _b1_,
        @SuppressWarnings("hiding") TSinon _sinon_,
        @SuppressWarnings("hiding") PIbloc _b2_)
    {
        // Constructor
        setSi(_si_);

        setE(_e_);

        setAlors(_alors_);

        setB1(_b1_);

        setSinon(_sinon_);

        setB2(_b2_);

    }

    @Override
    public Object clone()
    {
        return new AClosIsi(
            cloneNode(this._si_),
            cloneNode(this._e_),
            cloneNode(this._alors_),
            cloneNode(this._b1_),
            cloneNode(this._sinon_),
            cloneNode(this._b2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClosIsi(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public PE getE()
    {
        return this._e_;
    }

    public void setE(PE node)
    {
        if(this._e_ != null)
        {
            this._e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e_ = node;
    }

    public TAlors getAlors()
    {
        return this._alors_;
    }

    public void setAlors(TAlors node)
    {
        if(this._alors_ != null)
        {
            this._alors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alors_ = node;
    }

    public PIbloc getB1()
    {
        return this._b1_;
    }

    public void setB1(PIbloc node)
    {
        if(this._b1_ != null)
        {
            this._b1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b1_ = node;
    }

    public TSinon getSinon()
    {
        return this._sinon_;
    }

    public void setSinon(TSinon node)
    {
        if(this._sinon_ != null)
        {
            this._sinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sinon_ = node;
    }

    public PIbloc getB2()
    {
        return this._b2_;
    }

    public void setB2(PIbloc node)
    {
        if(this._b2_ != null)
        {
            this._b2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._e_)
            + toString(this._alors_)
            + toString(this._b1_)
            + toString(this._sinon_)
            + toString(this._b2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._e_ == child)
        {
            this._e_ = null;
            return;
        }

        if(this._alors_ == child)
        {
            this._alors_ = null;
            return;
        }

        if(this._b1_ == child)
        {
            this._b1_ = null;
            return;
        }

        if(this._sinon_ == child)
        {
            this._sinon_ = null;
            return;
        }

        if(this._b2_ == child)
        {
            this._b2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._e_ == oldChild)
        {
            setE((PE) newChild);
            return;
        }

        if(this._alors_ == oldChild)
        {
            setAlors((TAlors) newChild);
            return;
        }

        if(this._b1_ == oldChild)
        {
            setB1((PIbloc) newChild);
            return;
        }

        if(this._sinon_ == oldChild)
        {
            setSinon((TSinon) newChild);
            return;
        }

        if(this._b2_ == oldChild)
        {
            setB2((PIbloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
