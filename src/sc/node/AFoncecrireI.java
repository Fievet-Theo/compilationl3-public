/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AFoncecrireI extends PI
{
    private PIecrire _iecrire_;

    public AFoncecrireI()
    {
        // Constructor
    }

    public AFoncecrireI(
        @SuppressWarnings("hiding") PIecrire _iecrire_)
    {
        // Constructor
        setIecrire(_iecrire_);

    }

    @Override
    public Object clone()
    {
        return new AFoncecrireI(
            cloneNode(this._iecrire_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFoncecrireI(this);
    }

    public PIecrire getIecrire()
    {
        return this._iecrire_;
    }

    public void setIecrire(PIecrire node)
    {
        if(this._iecrire_ != null)
        {
            this._iecrire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iecrire_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._iecrire_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._iecrire_ == child)
        {
            this._iecrire_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._iecrire_ == oldChild)
        {
            setIecrire((PIecrire) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
