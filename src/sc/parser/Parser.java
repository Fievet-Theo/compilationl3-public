/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PP node1 = (PP) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AP */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AEntierDv */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ATabDv */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADecfoncLdf */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVideLdf */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ADf */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ALisdecLdvo */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AVideLdvo */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ADecvarLd */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce AVideLd */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ADecvar2Ldvb */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AVideLdvb */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AApp */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AIdVar */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list, false);
            }
            break;
            case 14: /* reduce AIdexprVar */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AExprLe */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce AVideLe */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AVirguleLe1 */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list, false);
            }
            break;
            case 18: /* reduce AVideLe1 */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce ALiLi */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce AVideLi */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AAffectationI */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ASiI */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce ATantqueI */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AAppfoncI */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce ARetourI */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce ABlocI */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AIa */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AIaf */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list, false);
            }
            break;
            case 29: /* reduce AIbloc */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list, false);
            }
            break;
            case 30: /* reduce ASialorsIsi */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list, false);
            }
            break;
            case 31: /* reduce ASinonIsi */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce AItq */
            {
                ArrayList<Object> list = new32();
                push(goTo(17), list, false);
            }
            break;
            case 33: /* reduce AIr */
            {
                ArrayList<Object> list = new33();
                push(goTo(18), list, false);
            }
            break;
            case 34: /* reduce AOuExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list, false);
            }
            break;
            case 35: /* reduce AExpr1Expr */
            {
                ArrayList<Object> list = new35();
                push(goTo(19), list, false);
            }
            break;
            case 36: /* reduce AEtExpr1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list, false);
            }
            break;
            case 37: /* reduce AExpr2Expr1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(20), list, false);
            }
            break;
            case 38: /* reduce AEgalExpr2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list, false);
            }
            break;
            case 39: /* reduce AInfExpr2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list, false);
            }
            break;
            case 40: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list, false);
            }
            break;
            case 41: /* reduce APlusExpr3 */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list, false);
            }
            break;
            case 42: /* reduce AMinusExpr3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list, false);
            }
            break;
            case 43: /* reduce AExpr4Expr3 */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list, false);
            }
            break;
            case 44: /* reduce AMultExpr4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list, false);
            }
            break;
            case 45: /* reduce ADivExpr4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(23), list, false);
            }
            break;
            case 46: /* reduce AExpr5Expr4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list, false);
            }
            break;
            case 47: /* reduce ANegationExpr5 */
            {
                ArrayList<Object> list = new47();
                push(goTo(24), list, false);
            }
            break;
            case 48: /* reduce AExpr6Expr5 */
            {
                ArrayList<Object> list = new48();
                push(goTo(24), list, false);
            }
            break;
            case 49: /* reduce AExprExpr6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(25), list, false);
            }
            break;
            case 50: /* reduce ANbExpr6 */
            {
                ArrayList<Object> list = new50();
                push(goTo(25), list, false);
            }
            break;
            case 51: /* reduce AAppExpr6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AVarExpr6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list, false);
            }
            break;
            case 53: /* reduce ALireExpr6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PLdvo pldvoNode2;
        PLdf pldfNode3;
        pldvoNode2 = (PLdvo)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        ppNode1 = new AP(pldvoNode2, pldfNode3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AEntierDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TEntier tentierNode2;
        TId tidNode3;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdvNode1 = new AEntierDv(tentierNode2, tidNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ATabDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        TEntier tentierNode2;
        TId tidNode3;
        TCo tcoNode4;
        TNb tnbNode5;
        TCf tcfNode6;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tnbNode5 = (TNb)nodeArrayList4.get(0);
        tcfNode6 = (TCf)nodeArrayList5.get(0);

        pdvNode1 = new ATabDv(tentierNode2, tidNode3, tcoNode4, tnbNode5, tcfNode6);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADecfoncLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new ADecfoncLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVideLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new AVideLdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLd pldNode4;
        TPf tpfNode5;
        PLdvo pldvoNode6;
        PIbloc piblocNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pldNode4 = (PLd)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);
        pldvoNode6 = (PLdvo)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pdfNode1 = new ADf(tidNode2, tpoNode3, pldNode4, tpfNode5, pldvoNode6, piblocNode7);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ALisdecLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvo pldvoNode1;
        {
            // Block
        PLd pldNode2;
        TPv tpvNode3;
        pldNode2 = (PLd)nodeArrayList1.get(0);
        tpvNode3 = (TPv)nodeArrayList2.get(0);

        pldvoNode1 = new ALisdecLdvo(pldNode2, tpvNode3);
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVideLdvo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvo pldvoNode1;
        {
            // Block

        pldvoNode1 = new AVideLdvo();
        }
	nodeList.add(pldvoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ADecvarLd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLd pldNode1;
        {
            // Block
        PDv pdvNode2;
        PLdvb pldvbNode3;
        pdvNode2 = (PDv)nodeArrayList1.get(0);
        pldvbNode3 = (PLdvb)nodeArrayList2.get(0);

        pldNode1 = new ADecvarLd(pdvNode2, pldvbNode3);
        }
	nodeList.add(pldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVideLd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLd pldNode1;
        {
            // Block

        pldNode1 = new AVideLd();
        }
	nodeList.add(pldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADecvar2Ldvb */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvb pldvbNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDv pdvNode3;
        PLdvb pldvbNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);
        pldvbNode4 = (PLdvb)nodeArrayList3.get(0);

        pldvbNode1 = new ADecvar2Ldvb(tvirguleNode2, pdvNode3, pldvbNode4);
        }
	nodeList.add(pldvbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVideLdvb */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvb pldvbNode1;
        {
            // Block

        pldvbNode1 = new AVideLdvb();
        }
	nodeList.add(pldvbNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AApp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PApp pappNode1;
        {
            // Block
        TId tidNode2;
        TPo tpoNode3;
        PLe pleNode4;
        TPf tpfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tpoNode3 = (TPo)nodeArrayList2.get(0);
        pleNode4 = (PLe)nodeArrayList3.get(0);
        tpfNode5 = (TPf)nodeArrayList4.get(0);

        pappNode1 = new AApp(tidNode2, tpoNode3, pleNode4, tpfNode5);
        }
	nodeList.add(pappNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIdexprVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TCo tcoNode3;
        PExpr pexprNode4;
        TCf tcfNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcoNode3 = (TCo)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tcfNode5 = (TCf)nodeArrayList4.get(0);

        pvarNode1 = new AIdexprVar(tidNode2, tcoNode3, pexprNode4, tcfNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExprLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLe pleNode1;
        {
            // Block
        PExpr pexprNode2;
        PLe1 ple1Node3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        ple1Node3 = (PLe1)nodeArrayList2.get(0);

        pleNode1 = new AExprLe(pexprNode2, ple1Node3);
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVideLe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLe pleNode1;
        {
            // Block

        pleNode1 = new AVideLe();
        }
	nodeList.add(pleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVirguleLe1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLe1 ple1Node1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpr pexprNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        ple1Node1 = new AVirguleLe1(tvirguleNode2, pexprNode3);
        }
	nodeList.add(ple1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVideLe1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLe1 ple1Node1;
        {
            // Block

        ple1Node1 = new AVideLe1();
        }
	nodeList.add(ple1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALiLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        PI piNode2;
        PLi pliNode3;
        piNode2 = (PI)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);

        pliNode1 = new ALiLi(piNode2, pliNode3);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVideLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLi pliNode1;
        {
            // Block

        pliNode1 = new AVideLi();
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAffectationI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIa piaNode2;
        piaNode2 = (PIa)nodeArrayList1.get(0);

        piNode1 = new AAffectationI(piaNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASiI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIsi pisiNode2;
        pisiNode2 = (PIsi)nodeArrayList1.get(0);

        piNode1 = new ASiI(pisiNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATantqueI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PItq pitqNode2;
        pitqNode2 = (PItq)nodeArrayList1.get(0);

        piNode1 = new ATantqueI(pitqNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAppfoncI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIaf piafNode2;
        piafNode2 = (PIaf)nodeArrayList1.get(0);

        piNode1 = new AAppfoncI(piafNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIr pirNode2;
        pirNode2 = (PIr)nodeArrayList1.get(0);

        piNode1 = new ARetourI(pirNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABlocI */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PI piNode1;
        {
            // Block
        PIbloc piblocNode2;
        piblocNode2 = (PIbloc)nodeArrayList1.get(0);

        piNode1 = new ABlocI(piblocNode2);
        }
	nodeList.add(piNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIa piaNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpr pexprNode4;
        TPv tpvNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tpvNode5 = (TPv)nodeArrayList4.get(0);

        piaNode1 = new AIa(pvarNode2, tegalNode3, pexprNode4, tpvNode5);
        }
	nodeList.add(piaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIaf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIaf piafNode1;
        {
            // Block
        PApp pappNode2;
        TPv tpvNode3;
        pappNode2 = (PApp)nodeArrayList1.get(0);
        tpvNode3 = (TPv)nodeArrayList2.get(0);

        piafNode1 = new AIaf(pappNode2, tpvNode3);
        }
	nodeList.add(piafNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIbloc piblocNode1;
        {
            // Block
        TAo taoNode2;
        PLi pliNode3;
        TAf tafNode4;
        taoNode2 = (TAo)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);
        tafNode4 = (TAf)nodeArrayList3.get(0);

        piblocNode1 = new AIbloc(taoNode2, pliNode3, tafNode4);
        }
	nodeList.add(piblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASialorsIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PIbloc piblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pisiNode1 = new ASialorsIsi(tsiNode2, pexprNode3, talorsNode4, piblocNode5);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASinonIsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIsi pisiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PIbloc piblocNode5;
        TSinon tsinonNode6;
        PIbloc piblocNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        piblocNode7 = (PIbloc)nodeArrayList6.get(0);

        pisiNode1 = new ASinonIsi(tsiNode2, pexprNode3, talorsNode4, piblocNode5, tsinonNode6, piblocNode7);
        }
	nodeList.add(pisiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AItq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItq pitqNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpr pexprNode3;
        TFaire tfaireNode4;
        PIbloc piblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        piblocNode5 = (PIbloc)nodeArrayList4.get(0);

        pitqNode1 = new AItq(ttantqueNode2, pexprNode3, tfaireNode4, piblocNode5);
        }
	nodeList.add(pitqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIr pirNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpr pexprNode3;
        TPv tpvNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tpvNode4 = (TPv)nodeArrayList3.get(0);

        pirNode1 = new AIr(tretourNode2, pexprNode3, tpvNode4);
        }
	nodeList.add(pirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AOuExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOu touNode3;
        PExpr1 pexpr1Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpr1Node4 = (PExpr1)nodeArrayList3.get(0);

        pexprNode1 = new AOuExpr(pexprNode2, touNode3, pexpr1Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr1 pexpr1Node2;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);

        pexprNode1 = new AExpr1Expr(pexpr1Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEtExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr1 pexpr1Node2;
        TEt tetNode3;
        PExpr2 pexpr2Node4;
        pexpr1Node2 = (PExpr1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexpr1Node1 = new AEtExpr1(pexpr1Node2, tetNode3, pexpr2Node4);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpr2Expr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr1 pexpr1Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexpr1Node1 = new AExpr2Expr1(pexpr2Node2);
        }
	nodeList.add(pexpr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEgalExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEgal tegalNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEgalExpr2(pexpr2Node2, tegalNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AInfExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TInf tinfNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AInfExpr2(pexpr2Node2, tinfNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr3Expr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APlusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TPlus tplusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new APlusExpr3(pexpr3Node2, tplusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMinusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TMinus tminusNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AMinusExpr3(pexpr3Node2, tminusNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AExpr4Expr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMult tmultNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AMultExpr4(pexpr4Node2, tmultNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADivExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TDiv tdivNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new ADivExpr4(pexpr4Node2, tdivNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AExpr5Expr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANegationExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        TNegation tnegationNode2;
        PExpr5 pexpr5Node3;
        tnegationNode2 = (TNegation)nodeArrayList1.get(0);
        pexpr5Node3 = (PExpr5)nodeArrayList2.get(0);

        pexpr5Node1 = new ANegationExpr5(tnegationNode2, pexpr5Node3);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpr6Expr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AExpr6Expr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExprExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TPo tpoNode2;
        PExpr pexprNode3;
        TPf tpfNode4;
        tpoNode2 = (TPo)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tpfNode4 = (TPf)nodeArrayList3.get(0);

        pexpr6Node1 = new AExprExpr6(tpoNode2, pexprNode3, tpfNode4);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANbExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNb tnbNode2;
        tnbNode2 = (TNb)nodeArrayList1.get(0);

        pexpr6Node1 = new ANbExpr6(tnbNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAppExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PApp pappNode2;
        pappNode2 = (PApp)nodeArrayList1.get(0);

        pexpr6Node1 = new AAppExpr6(pappNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVarExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpr6Node1 = new AVarExpr6(pvarNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ALireExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TLire tlireNode2;
        tlireNode2 = (TLire)nodeArrayList1.get(0);

        pexpr6Node1 = new ALireExpr6(tlireNode2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 7}, {15, REDUCE, 9}, {24, SHIFT, 1}, },
			{{-1, ERROR, 1}, {26, SHIFT, 6}, },
			{{-1, ERROR, 2}, {27, ACCEPT, -1}, },
			{{-1, REDUCE, 11}, {18, SHIFT, 7}, },
			{{-1, REDUCE, 4}, {26, SHIFT, 9}, },
			{{-1, ERROR, 5}, {15, SHIFT, 12}, },
			{{-1, REDUCE, 1}, {19, SHIFT, 13}, },
			{{-1, ERROR, 7}, {24, SHIFT, 1}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 9}, {13, SHIFT, 15}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 4}, {26, SHIFT, 9}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 13}, {21, SHIFT, 17}, },
			{{-1, REDUCE, 11}, {18, SHIFT, 7}, },
			{{-1, REDUCE, 9}, {24, SHIFT, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 17}, {20, SHIFT, 20}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 19}, {14, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 9}, {16, REDUCE, 7}, {24, SHIFT, 1}, },
			{{-1, ERROR, 22}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 25}, {2, SHIFT, 26}, {16, SHIFT, 23}, {23, SHIFT, 27}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 25}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 26}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 27}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 13}, {13, SHIFT, 54}, {19, SHIFT, 55}, },
			{{-1, ERROR, 29}, {15, SHIFT, 56}, },
			{{-1, ERROR, 30}, {10, SHIFT, 57}, },
			{{-1, ERROR, 31}, {17, SHIFT, 58}, },
			{{-1, REDUCE, 20}, {1, SHIFT, 25}, {2, SHIFT, 26}, {16, SHIFT, 23}, {23, SHIFT, 27}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 39}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 40}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 45}, {9, SHIFT, 62}, {22, SHIFT, 63}, },
			{{-1, REDUCE, 35}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 37}, {10, SHIFT, 65}, {11, SHIFT, 66}, },
			{{-1, REDUCE, 40}, {4, SHIFT, 67}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 43}, {6, SHIFT, 69}, {7, SHIFT, 70}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 52}, {3, SHIFT, 71}, {9, SHIFT, 62}, },
			{{-1, ERROR, 53}, {9, SHIFT, 62}, {15, SHIFT, 72}, },
			{{-1, REDUCE, 16}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 55}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 57}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 61}, {9, SHIFT, 62}, {14, SHIFT, 77}, },
			{{-1, ERROR, 62}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 63}, {16, SHIFT, 23}, },
			{{-1, ERROR, 64}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 65}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 66}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 67}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 68}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 69}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 70}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, ERROR, 71}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 73}, {14, SHIFT, 88}, },
			{{-1, REDUCE, 18}, {9, SHIFT, 62}, {18, SHIFT, 89}, },
			{{-1, ERROR, 75}, {9, SHIFT, 62}, {20, SHIFT, 91}, },
			{{-1, ERROR, 76}, {9, SHIFT, 62}, {15, SHIFT, 92}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 34}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 30}, {0, SHIFT, 93}, },
			{{-1, REDUCE, 36}, {10, SHIFT, 65}, {11, SHIFT, 66}, },
			{{-1, REDUCE, 38}, {4, SHIFT, 67}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 39}, {4, SHIFT, 67}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 41}, {6, SHIFT, 69}, {7, SHIFT, 70}, },
			{{-1, REDUCE, 42}, {6, SHIFT, 69}, {7, SHIFT, 70}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 89}, {12, SHIFT, 39}, {13, SHIFT, 40}, {21, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 28}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 93}, {16, SHIFT, 23}, },
			{{-1, REDUCE, 17}, {9, SHIFT, 62}, },
			{{-1, REDUCE, 31}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {7, 14}, },
			{{-1, 10}, {11, 16}, },
			{{-1, 11}, },
			{{-1, 4}, {21, 22}, },
			{{-1, 5}, {15, 19}, },
			{{-1, 8}, {14, 18}, },
			{{-1, 43}, {23, 29}, {32, 29}, },
			{{-1, 44}, {23, 30}, {32, 30}, },
			{{-1, 73}, },
			{{-1, 90}, },
			{{-1, 31}, {32, 59}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 35}, {22, 24}, {63, 79}, {71, 87}, {93, 95}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 45}, {26, 52}, {27, 53}, {40, 61}, {54, 74}, {55, 75}, {57, 76}, {89, 94}, },
			{{-1, 46}, {62, 78}, },
			{{-1, 47}, {64, 80}, },
			{{-1, 48}, {65, 81}, {66, 82}, },
			{{-1, 49}, {67, 83}, {68, 84}, },
			{{-1, 50}, {39, 60}, {69, 85}, {70, 86}, },
			{{-1, 51}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier ', id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: ')', ';', ','",
			"expecting: id, EOF",
			"expecting: ';'",
			"expecting: ')', ';', ',', '['",
			"expecting: 'entier '",
			"expecting: ')', ';'",
			"expecting: '('",
			"expecting: '{', id, EOF",
			"expecting: nb",
			"expecting: ')', 'entier '",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: ';', '{', 'entier '",
			"expecting: '{'",
			"expecting: 'si', 'tantque', '{', '}', 'retour', id",
			"expecting: '!', '(', nb, 'lire()', id",
			"expecting: 'faire', '+', '-', '*', '/', '&', '|', '=', '<', '(', ')', ';', ',', '[', ']', ' alors'",
			"expecting: '='",
			"expecting: '}'",
			"expecting: 'faire', '+', '-', '*', '/', '&', '|', '=', '<', ')', ';', ',', ']', ' alors'",
			"expecting: '|', ' alors'",
			"expecting: 'faire', '&', '|', ')', ';', ',', ']', ' alors'",
			"expecting: 'faire', '&', '|', '=', '<', ')', ';', ',', ']', ' alors'",
			"expecting: 'faire', '+', '-', '&', '|', '=', '<', ')', ';', ',', ']', ' alors'",
			"expecting: 'faire', '|'",
			"expecting: '|', ';'",
			"expecting: '!', '(', ')', nb, 'lire()', id",
			"expecting: 'sinon', 'si', 'tantque', '{', '}', 'retour', id, EOF",
			"expecting: '|', ')'",
			"expecting: '|', ')', ','",
			"expecting: '|', ']'",
			"expecting: 'sinon', 'si', 'tantque', '{', '}', 'retour', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 10, 11, 3, 12, 2, 13, 8, 14, 3, 15, 16, 17, 4, 18, 18, 18, 19, 5, 20, 21, 17, 17, 17, 17, 17, 17, 17, 18, 18, 22, 22, 22, 22, 23, 24, 25, 26, 22, 22, 22, 27, 28, 29, 18, 17, 18, 30, 21, 22, 31, 18, 16, 18, 18, 18, 18, 18, 18, 18, 16, 17, 14, 32, 33, 28, 22, 24, 34, 25, 26, 26, 22, 22, 22, 22, 17, 22, 18, 14, 22, 17, 16, 31, 17, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
