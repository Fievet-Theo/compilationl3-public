/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.analysis;

import java.util.*;
import src.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExpr(AOuExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr1Expr(AExpr1Expr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExpr1(AEtExpr1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr2Expr1(AExpr2Expr1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalExpr2(AEgalExpr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExpr2(AInfExpr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr3Expr2(AExpr3Expr2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpr3(APlusExpr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpr3(AMinusExpr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr4Expr3(AExpr4Expr3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpr4(AMultExpr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpr4(ADivExpr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr5Expr4(AExpr5Expr4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegationExpr5(ANegationExpr5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr6Expr5(AExpr6Expr5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprExpr6(AExprExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANbExpr6(ANbExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppExpr6(AAppExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarExpr6(AVarExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireExpr6(ALireExpr6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAApp(AApp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdexprVar(AIdexprVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprLe(AExprLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLe(AVideLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVirguleLe1(AVirguleLe1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLe1(AVideLe1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiLi(ALiLi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLi(AVideLi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationI(AAffectationI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASiI(ASiI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATantqueI(ATantqueI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppfoncI(AAppfoncI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetourI(ARetourI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocI(ABlocI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireI(AEcrireI node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalexprIa(AEgalexprIa node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalafIa(AEgalafIa node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIaf(AIaf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAff(AAff node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIbloc(AIbloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIbloc1(AIbloc1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASialorsIsi(ASialorsIsi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinonIsi(ASinonIsi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAItq(AItq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIr(AIr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAP(AP node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecfoncLdf(ADecfoncLdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLdf(AVideLdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADf(ADf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALisdecLdvo(ALisdecLdvo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLdvo(AVideLdvo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvarLd(ADecvarLd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLd(AVideLd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecvar2Ldvb(ADecvar2Ldvb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideLdvb(AVideLdvb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADv(ADv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabDv1(ATabDv1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVideDv1(AVideDv1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIecr(AIecr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEgal(TEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNegation(TNegation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPo(TPo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPf(TPf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPv(TPv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAo(TAo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAf(TAf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCo(TCo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCf(TCf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNb(TNb node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
